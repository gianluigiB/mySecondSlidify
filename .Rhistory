cat(paste("TC9[",flag, "][NOK]: The TPs of", length(unique(rb.flagged.sites.mismatch$Site_Id)), "unique flagged sites are not available in the register. \n"))
tp.wrongly.flagged.sites<-merge(rb.flagged.sites.mismatch, tp.flagged.sites, by="Site_Id", all = FALSE)
cat(paste("TC9[",flag, "]: writing a sample of the", length(unique(tp.wrongly.flagged.sites[,4])), "unique TPs not in the register to file. \n"))
writeFile(paste("TC9 sample", flag, "tps of flagged site not in register. Run of"), tp.wrongly.flagged.sites, tds, sample=TRUE)
} else {
cat(paste("TC9[",flag, "][OK]: The", num.unique.register.matched.tps, "TPs available in the register are related to the", num.unique.flagged.sites, "sites under test. \n"))
}
}
}
}
testT9 <- function(registerflags){
#random 2% sample from ccm_site_optouts (registerflags only)
registers.ccm.site.optout<-ccm_site_optout[, which(names(ccm_site_optout) %in% c("Site_Id",levels(registerflags$flag)))]
sample.registers.ccm.site.optout<-registers.ccm.site.optout[sample(nrow(registers.ccm.site.optout), 0.02*nrow(registers.ccm.site.optout)), ]
cat(paste("TC9[ Register Flags ]: 2% sample contains", nrow(sample.registers.ccm.site.optout), "records from ccm_site_optout. \n"))
for (flag in registerflags$flag) {
#Are the tp for the register flag within the 2% sample from ccm_tp_site also in cpr_tp_rb_all?
#for each site with flag=1 pick up the related tp(s) in ccm_tp_site for the appropriate media (via tp.uri.regex)
flagged.sites<-sample.registers.ccm.site.optout[sample.registers.ccm.site.optout[,flag] == 1, which(names(sample.registers.ccm.site.optout) %in% c("Site_Id", flag))]
tp.flagged.sites<-merge(flagged.sites, ccm_tp_site, by="Site_Id", all = FALSE)
tp.flagged.sites<-tp.flagged.sites[grep(tp.uri.regex[[registerflags[registerflags$flag == flag,]$media]], tp.flagged.sites$touchpoint_uri), ]
tp.flagged.sites$touchpoint_uri<-toupper(tp.flagged.sites$touchpoint_uri)
num.unique.flagged.sites<-length(unique(tp.flagged.sites$Site_Id))
cat(paste("TC9[",flag, "]: 2% sample has", num.unique.flagged.sites, "flagged unique sites. \n"))
#check whether those tps are in cpr_tp_rb_all for the same registry and media
flag_cpr_tp_rb_all<-cpr_tp_rb_all[toupper(cpr_tp_rb_all$EXTERNAL_REGISTRY) == toupper(registerflags[registerflags$flag == flag,]$register) & toupper(cpr_tp_rb_all$TOUCHPOINT_MEDIA) == toupper(registerflags[registerflags$flag == flag,]$media), ]
flag_cpr_tp_rb_all<-flag_cpr_tp_rb_all[grep(tp.uri.regex[[registerflags[registerflags$flag == flag,]$media]], flag_cpr_tp_rb_all$TOUCHPOINT_URI), ]
flag_cpr_tp_rb_all$TOUCHPOINT_URI<-toupper(flag_cpr_tp_rb_all$TOUCHPOINT_URI)
rb.tp.flagged.sites.match<-merge(tp.flagged.sites, flag_cpr_tp_rb_all, by.x="touchpoint_uri", by.y="TOUCHPOINT_URI", all=FALSE)
num.unique.flagged.tps<-length(unique(tp.flagged.sites$touchpoint_uri))
num.unique.register.matched.tps<-length(unique(rb.tp.flagged.sites.match$touchpoint_uri))
cat(paste("TC9[",flag, "]: TPs related to 2% sample flagged sites are", num.unique.flagged.tps, "of which", num.unique.register.matched.tps, "can be found in the external registry\n"))
if (registerflags$register != "NOR"){
#check whether all the tp related to flagged sites are in cpr register
if (num.unique.flagged.tps != num.unique.register.matched.tps){
rb.tp.flagged.mismatch<-data.frame(touchpoint_uri = setdiff(tp.flagged.sites$touchpoint_uri, rb.tp.flagged.sites.match$touchpoint_uri))
tp.wrongly.flagged.sites<-merge(rb.tp.flagged.mismatch, tp.flagged.sites, by="touchpoint_uri", all=FALSE)
cat(paste("TC9[",flag, "][NOK]: The", length(unique(rb.tp.flagged.mismatch$touchpoint_uri)),"TPs of", length(unique(tp.wrongly.flagged.sites$Site_Id)), "unique flagged sites are not ALL available in the register. \n"))
cat(paste("TC9[",flag, "]: writing a sample of them in the register to file. \n"))
} else {
cat(paste("TC9[",flag, "][OK]: All the", num.unique.register.matched.tps, "TPs available in the register are also all the ones related to the", num.unique.flagged.sites, "sites under test. \n"))
}
}
if (registerflags$register == "NOR"){
#check whether sites of the matching tp rb cover all the flagged sites: it's enough that at least one of the related tp to flagged site is in cpr register
rb.flagged.sites.mismatch<-data.frame(Site_Id = setdiff(tp.flagged.sites$Site_Id, rb.tp.flagged.sites.match$Site_Id))
if (nrow(rb.flagged.sites.mismatch) > 0) {
#if not in put those sites and the related tp in a data frame and then in a file
cat(paste("TC9[",flag, "][NOK]: The TPs of", length(unique(rb.flagged.sites.mismatch$Site_Id)), "unique flagged sites are not available in the register. \n"))
tp.wrongly.flagged.sites<-merge(rb.flagged.sites.mismatch, tp.flagged.sites, by="Site_Id", all = FALSE)
cat(paste("TC9[",flag, "]: writing a sample of the", length(unique(tp.wrongly.flagged.sites[,4])), "unique TPs not in the register to file. \n"))
writeFile(paste("TC9 sample", flag, "tps of flagged site not in register. Run of"), tp.wrongly.flagged.sites, tds, sample=TRUE)
} else {
cat(paste("TC9[",flag, "][OK]: The", num.unique.register.matched.tps, "TPs available in the register are related to the", num.unique.flagged.sites, "sites under test. \n"))
}
}
}
}
testT9(cim.register.flags)
warnings()
testT9 <- function(registerflags){
#random 2% sample from ccm_site_optouts (registerflags only)
registers.ccm.site.optout<-ccm_site_optout[, which(names(ccm_site_optout) %in% c("Site_Id",levels(registerflags$flag)))]
sample.registers.ccm.site.optout<-registers.ccm.site.optout[sample(nrow(registers.ccm.site.optout), 0.02*nrow(registers.ccm.site.optout)), ]
cat(paste("TC9[ Register Flags ]: 2% sample contains", nrow(sample.registers.ccm.site.optout), "records from ccm_site_optout. \n"))
for (flag in registerflags$flag) {
#Are the tp for the register flag within the 2% sample from ccm_tp_site also in cpr_tp_rb_all?
#for each site with flag=1 pick up the related tp(s) in ccm_tp_site for the appropriate media (via tp.uri.regex)
flagged.sites<-sample.registers.ccm.site.optout[sample.registers.ccm.site.optout[,flag] == 1, which(names(sample.registers.ccm.site.optout) %in% c("Site_Id", flag))]
tp.flagged.sites<-merge(flagged.sites, ccm_tp_site, by="Site_Id", all = FALSE)
tp.flagged.sites<-tp.flagged.sites[grep(tp.uri.regex[[registerflags[registerflags$flag == flag,]$media]], tp.flagged.sites$touchpoint_uri), ]
tp.flagged.sites$touchpoint_uri<-toupper(tp.flagged.sites$touchpoint_uri)
num.unique.flagged.sites<-length(unique(tp.flagged.sites$Site_Id))
cat(paste("TC9[",flag, "]: 2% sample has", num.unique.flagged.sites, "flagged unique sites. \n"))
#check whether those tps are in cpr_tp_rb_all for the same registry and media
flag_cpr_tp_rb_all<-cpr_tp_rb_all[toupper(cpr_tp_rb_all$EXTERNAL_REGISTRY) == toupper(registerflags[registerflags$flag == flag,]$register) & toupper(cpr_tp_rb_all$TOUCHPOINT_MEDIA) == toupper(registerflags[registerflags$flag == flag,]$media), ]
flag_cpr_tp_rb_all<-flag_cpr_tp_rb_all[grep(tp.uri.regex[[registerflags[registerflags$flag == flag,]$media]], flag_cpr_tp_rb_all$TOUCHPOINT_URI), ]
flag_cpr_tp_rb_all$TOUCHPOINT_URI<-toupper(flag_cpr_tp_rb_all$TOUCHPOINT_URI)
rb.tp.flagged.sites.match<-merge(tp.flagged.sites, flag_cpr_tp_rb_all, by.x="touchpoint_uri", by.y="TOUCHPOINT_URI", all=FALSE)
num.unique.flagged.tps<-length(unique(tp.flagged.sites$touchpoint_uri))
num.unique.register.matched.tps<-length(unique(rb.tp.flagged.sites.match$touchpoint_uri))
cat(paste("TC9[",flag, "]: TPs related to 2% sample flagged sites are", num.unique.flagged.tps, "of which", num.unique.register.matched.tps, "can be found in the external registry\n"))
if (registerflags[registerflags$flag == flag, ]$register != "NOR")
#check whether all the tp related to flagged sites are in cpr register
if (num.unique.flagged.tps != num.unique.register.matched.tps){
rb.tp.flagged.mismatch<-data.frame(touchpoint_uri = setdiff(tp.flagged.sites$touchpoint_uri, rb.tp.flagged.sites.match$touchpoint_uri))
tp.wrongly.flagged.sites<-merge(rb.tp.flagged.mismatch, tp.flagged.sites, by="touchpoint_uri", all=FALSE)
cat(paste("TC9[",flag, "][NOK]: The", length(unique(rb.tp.flagged.mismatch$touchpoint_uri)),"TPs of", length(unique(tp.wrongly.flagged.sites$Site_Id)), "unique flagged sites are not ALL available in the register. \n"))
cat(paste("TC9[",flag, "]: writing a sample of them in the register to file. \n"))
} else {
cat(paste("TC9[",flag, "][OK]: All the", num.unique.register.matched.tps, "TPs available in the register are also all the ones related to the", num.unique.flagged.sites, "sites under test. \n"))
}
}
if (registerflags[registerflags$flag == flag, ]$register == "NOR"){
#check whether sites of the matching tp rb cover all the flagged sites: it's enough that at least one of the related tp to flagged site is in cpr register
rb.flagged.sites.mismatch<-data.frame(Site_Id = setdiff(tp.flagged.sites$Site_Id, rb.tp.flagged.sites.match$Site_Id))
if (nrow(rb.flagged.sites.mismatch) > 0) {
#if not in put those sites and the related tp in a data frame and then in a file
cat(paste("TC9[",flag, "][NOK]: The TPs of", length(unique(rb.flagged.sites.mismatch$Site_Id)), "unique flagged sites are not available in the register. \n"))
tp.wrongly.flagged.sites<-merge(rb.flagged.sites.mismatch, tp.flagged.sites, by="Site_Id", all = FALSE)
cat(paste("TC9[",flag, "]: writing a sample of the", length(unique(tp.wrongly.flagged.sites[,4])), "unique TPs not in the register to file. \n"))
writeFile(paste("TC9 sample", flag, "tps of flagged site not in register. Run of"), tp.wrongly.flagged.sites, tds, sample=TRUE)
} else {
cat(paste("TC9[",flag, "][OK]: The", num.unique.register.matched.tps, "TPs available in the register are related to the", num.unique.flagged.sites, "sites under test. \n"))
}
}
}
}
testT9 <- function(registerflags){
#random 2% sample from ccm_site_optouts (registerflags only)
registers.ccm.site.optout<-ccm_site_optout[, which(names(ccm_site_optout) %in% c("Site_Id",levels(registerflags$flag)))]
sample.registers.ccm.site.optout<-registers.ccm.site.optout[sample(nrow(registers.ccm.site.optout), 0.02*nrow(registers.ccm.site.optout)), ]
cat(paste("TC9[ Register Flags ]: 2% sample contains", nrow(sample.registers.ccm.site.optout), "records from ccm_site_optout. \n"))
for (flag in registerflags$flag) {
#Are the tp for the register flag within the 2% sample from ccm_tp_site also in cpr_tp_rb_all?
#for each site with flag=1 pick up the related tp(s) in ccm_tp_site for the appropriate media (via tp.uri.regex)
flagged.sites<-sample.registers.ccm.site.optout[sample.registers.ccm.site.optout[,flag] == 1, which(names(sample.registers.ccm.site.optout) %in% c("Site_Id", flag))]
tp.flagged.sites<-merge(flagged.sites, ccm_tp_site, by="Site_Id", all = FALSE)
tp.flagged.sites<-tp.flagged.sites[grep(tp.uri.regex[[registerflags[registerflags$flag == flag,]$media]], tp.flagged.sites$touchpoint_uri), ]
tp.flagged.sites$touchpoint_uri<-toupper(tp.flagged.sites$touchpoint_uri)
num.unique.flagged.sites<-length(unique(tp.flagged.sites$Site_Id))
cat(paste("TC9[",flag, "]: 2% sample has", num.unique.flagged.sites, "flagged unique sites. \n"))
#check whether those tps are in cpr_tp_rb_all for the same registry and media
flag_cpr_tp_rb_all<-cpr_tp_rb_all[toupper(cpr_tp_rb_all$EXTERNAL_REGISTRY) == toupper(registerflags[registerflags$flag == flag,]$register) & toupper(cpr_tp_rb_all$TOUCHPOINT_MEDIA) == toupper(registerflags[registerflags$flag == flag,]$media), ]
flag_cpr_tp_rb_all<-flag_cpr_tp_rb_all[grep(tp.uri.regex[[registerflags[registerflags$flag == flag,]$media]], flag_cpr_tp_rb_all$TOUCHPOINT_URI), ]
flag_cpr_tp_rb_all$TOUCHPOINT_URI<-toupper(flag_cpr_tp_rb_all$TOUCHPOINT_URI)
rb.tp.flagged.sites.match<-merge(tp.flagged.sites, flag_cpr_tp_rb_all, by.x="touchpoint_uri", by.y="TOUCHPOINT_URI", all=FALSE)
num.unique.flagged.tps<-length(unique(tp.flagged.sites$touchpoint_uri))
num.unique.register.matched.tps<-length(unique(rb.tp.flagged.sites.match$touchpoint_uri))
cat(paste("TC9[",flag, "]: TPs related to 2% sample flagged sites are", num.unique.flagged.tps, "of which", num.unique.register.matched.tps, "can be found in the external registry\n"))
if (registerflags[registerflags$flag == flag, ]$register != "NOR"){
#check whether all the tp related to flagged sites are in cpr register
if (num.unique.flagged.tps != num.unique.register.matched.tps){
rb.tp.flagged.mismatch<-data.frame(touchpoint_uri = setdiff(tp.flagged.sites$touchpoint_uri, rb.tp.flagged.sites.match$touchpoint_uri))
tp.wrongly.flagged.sites<-merge(rb.tp.flagged.mismatch, tp.flagged.sites, by="touchpoint_uri", all=FALSE)
cat(paste("TC9[",flag, "][NOK]: The", length(unique(rb.tp.flagged.mismatch$touchpoint_uri)),"TPs of", length(unique(tp.wrongly.flagged.sites$Site_Id)), "unique flagged sites are not ALL available in the register. \n"))
cat(paste("TC9[",flag, "]: writing a sample of them in the register to file. \n"))
} else {
cat(paste("TC9[",flag, "][OK]: All the", num.unique.register.matched.tps, "TPs available in the register are also all the ones related to the", num.unique.flagged.sites, "sites under test. \n"))
}
}
if (registerflags[registerflags$flag == flag, ]$register == "NOR"){
#check whether sites of the matching tp rb cover all the flagged sites: it's enough that at least one of the related tp to flagged site is in cpr register
rb.flagged.sites.mismatch<-data.frame(Site_Id = setdiff(tp.flagged.sites$Site_Id, rb.tp.flagged.sites.match$Site_Id))
if (nrow(rb.flagged.sites.mismatch) > 0) {
#if not in put those sites and the related tp in a data frame and then in a file
cat(paste("TC9[",flag, "][NOK]: The TPs of", length(unique(rb.flagged.sites.mismatch$Site_Id)), "unique flagged sites are not available in the register. \n"))
tp.wrongly.flagged.sites<-merge(rb.flagged.sites.mismatch, tp.flagged.sites, by="Site_Id", all = FALSE)
cat(paste("TC9[",flag, "]: writing a sample of the", length(unique(tp.wrongly.flagged.sites[,4])), "unique TPs not in the register to file. \n"))
writeFile(paste("TC9 sample", flag, "tps of flagged site not in register. Run of"), tp.wrongly.flagged.sites, tds, sample=TRUE)
} else {
cat(paste("TC9[",flag, "][OK]: The", num.unique.register.matched.tps, "TPs available in the register are related to the", num.unique.flagged.sites, "sites under test. \n"))
}
}
}
}
testT9(cim.register.flags)
source('D:/DataScienceKPN/R/sql/cim/TCs CCM-256 CCM-286 refactor.R')
source('D:/DataScienceKPN/R/sql/cim/TCs CCM-256 CCM-286 refactor.R')
source('D:/DataScienceKPN/R/functions/theWordCloud.R')
theWordCloud("#KPN")
setwd("D:/DataScienceKPN/R/functions")
theWordCloud("#KPN")
theWordCloud("goofynomics.")
warnings()
source('~/.active-rstudio-document')
source('D:/DataScienceKPN/R/functions/theWordCloud.R')
source('D:/DataScienceKPN/R/functions/theWordCloud.R')
theWordCloud("goofynomics.")
source('D:/DataScienceKPN/R/functions/theWordCloud.R')
theWordCloud("goofynomics.")
warnings
warnings()
theWordCloud("#noeuro")
source('D:/DataScienceKPN/R/functions/theWordCloud.R')
theWordCloud("@KPN")
theWordCloud("bagnai")
theWordCloud("bagnai")
source('D:/DataScienceKPN/R/functions/theWordCloud.R')
source('D:/DataScienceKPN/R/functions/theWordGraph.R')
source('D:/DataScienceKPN/R/functions/theWordGraph.R')
source('D:/DataScienceKPN/R/functions/theWordGraph.R')
theWordGraph("Bagnai")
install.packages("igraph")
install.packages("igraph")
install.packages("igraph")
install.packages("igraph")
source('D:/DataScienceKPN/R/functions/theWordGraph.R')
theWordGraph("Bagnai")
source('D:/DataScienceKPN/R/functions/theWordGraph.R')
source('D:/DataScienceKPN/R/functions/theWordGraph.R')
source('D:/DataScienceKPN/R/functions/theWordGraph.R')
theWordGraph("Bagnai AND Borghi")
theWordGraph("#KPN AND Blok")
theWordGraph("#KPN")
theWordGraph("#KPN AND aanbod")
theWordGraph("#KPN AND glas")
theWordGraph("KPN AND glas")
theWordGraph("KPN AND fiber")
theWordGraph("KPN AND 4G")
theWordGraph("#KPN AND 4G")
source('D:/DataScienceKPN/R/functions/theWordGraph.R')
theWordGraph("#KPN AND 4G")
source('D:/DataScienceKPN/R/functions/theWordGraph.R')
theWordGraph("#KPN AND 4G")
source('D:/DataScienceKPN/R/functions/theWordGraph.R')
theWordGraph("#KPN AND 4G")
source('D:/DataScienceKPN/R/functions/theWordGraph.R')
theWordGraph("#KPN AND 4G")
source('D:/DataScienceKPN/R/functions/theWordGraph.R')
theWordGraph("#KPN AND 4G")
source('D:/DataScienceKPN/R/functions/theWordGraph.R')
theWordGraph("#KPN AND 4G")
source('D:/DataScienceKPN/R/functions/theWordGraph.R')
theWordGraph("Roma AND Juve")
theWordGraph("Bagnai AND Borghi")
install.packages("vcd")
source('D:/DataScienceKPN/R/testing/cim/karpt_ecm_cim.R')
mosaic(EXTRA_VELD_01 ~ CELL_LABEL, data = ecm_only_xm)
install.packages(c("data.table", "DBI", "devtools", "digest", "Formula", "Hmisc", "httr", "labeling", "manipulate", "NLP", "quantmod", "RColorBrewer", "Rcpp", "RCurl", "reshape2", "RJDBC", "rjson", "ROAuth", "RSQLite", "twitteR"))
install.packages(c("data.table", "DBI", "devtools", "digest",
install.packages(c("data.table", "DBI", "devtools", "digest", "Formula", "Hmisc", "httr", "labeling", "manipulate", "NLP", "quantmod", "RColorBrewer", "Rcpp", "RCurl", "reshape2", "RJDBC", "rjson", "ROAuth", "RSQLite", "twitteR"))
install.packages(c("data.table", "DBI", "devtools", "digest",
install.packages(c("data.table", "DBI", "devtools", "digest")
)
;
install.packages(c("data.table", "DBI", "devtools", "digest"))
install.packages(c("data.table", "DBI", "devtools", "digest"))
install.packages(c("DBI", "Formula", "Hmisc", "labeling", "manipulate", "NLP", "quantmod", "RColorBrewer", "Rcpp", "RCurl", "reshape2", "RJDBC", "rjson", "ROAuth", "RSQLite", "twitteR"))
source('D:/DataScienceKPN/R/testing/cim/karpt_ecm_cim.R')
mosaic(EXTRA_VELD_01 ~ CELL_LABEL, data = ecm_only_xm)
summary(ecm_only_xm$EXTRA_VELD_01)
test <- ecm_only_xm$EXTRA_VELD_01
test2 <- strptime(test, "%d/%m/%Y")
ecm_only_xm$EXTRA_VELD_01 <- strptime(ecm_only_xm$EXTRA_VELD_01, "%d/%m/%Y")
mosaic(~EXTRA_VELD_01 ~ CELL_LABEL, data = ecm_only_xm)
mosaic(~EXTRA_VELD_01 CELL_LABEL, data = ecm_only_xm)
mosaic(~EXTRA_VELD_01, CELL_LABEL, data = ecm_only_xm)
mosaic(CELL_LABEL ~ EXTRA_VELD_01, data = ecm_only_xm)
mosaic(CELL_LABEL ~ EXTRA_VELD_01, data = ecm_only_xm, labeling = labeling_cells)
mosaic(CELL_LABEL ~ EXTRA_VELD_01, data = ecm_only_xm, text =ecm_only_xm)
mosaic(EXTRA_VELD_01 ~ CELL_LABEL, data = ecm_only_xm, text =ecm_only_xm)
mosaic(EXTRA_VELD_01 ~ CELL_LABEL, data = ecm_only_xm, text =ecm_only_xm, labeling_args = list(rot_labels= c(bottom = 90, right=0)))
mosaic(EXTRA_VELD_01 ~ CELL_LABEL, data = ecm_only_xm, text =ecm_only_xm, labeling_args = list(rot_labels= c(bottom = 90, right=0), offset_varnames = c(right = 1), offset_labels = c(right = 0.3)),
+ margins = c(right = 4, bottom = 3))
))
mosaic(EXTRA_VELD_01 ~ CELL_LABEL, data = ecm_only_xm, text =ecm_only_xm, labeling_args = list(rot_labels= c(bottom = 90, right=0), offset_varnames = c(right = 1), offset_labels = c(right = 0.3)),
+ margins = c(right = 4, bottom = 3))
mosaic(EXTRA_VELD_01 ~ CELL_LABEL, data = ecm_only_xm, text =ecm_only_xm, labeling_args = list(rot_labels= c(bottom = 90, right=0), offset_varnames = c(right = 1), offset_labels = c(right = 0.3)), margins = c(right = 4, bottom = 3))
mosaic(EXTRA_VELD_01 ~ CELL_LABEL, data = ecm_only_xm, text =ecm_only_xm, labeling_args = list(rot_labels= c(top = 90, left=0), offset_varnames = c(left = 1), offset_labels = c(left = 0.3)), margins = c(left = 4, top = 3))
mosaic(EXTRA_VELD_01 ~ CELL_LABEL, data = ecm_only_xm, text =ecm_only_xm, labeling_args = list(rot_labels= c(top = 90, left=0), offset_varnames = c(left = 1), offset_labels = c(left = 0.3)), margins = c(left = 4, top = 3), gp = shading_max)
mosaic(EXTRA_VELD_01 ~ CELL_LABEL, data = ecm_only_xm, text =ecm_only_xm, labeling_args = list(rot_labels= c(top = 90, left=0), offset_varnames = c(left = 1), offset_labels = c(left = 0.3)), margins = c(left = 4, top = 3), gp = shading_Friendly, legend=legend_fixed)
mosaic(EXTRA_VELD_01 ~ CELL_LABEL, data = ecm_only_xm, text =ecm_only_xm, labeling_args = list(rot_labels= c(top = 90, left=90), offset_varnames = c(left = 1), offset_labels = c(left = 0.3)), margins = c(left = 4, top = 3), gp = shading_Friendly, legend=legend_fixed)
mosaic(EXTRA_VELD_01 ~ CELL_LABEL, data = ecm_only_xm, text =ecm_only_xm, labeling_args = list(rot_labels= c(top = 90, left=90), offset_varnames = c(left = 1), offset_labels = c(left = 0.3)), margins = c(left = 4, top = 3), gp = shading_max, legend=legend_fixed)
summary(ecm_only_xm$EXTRA_VELD_01)
summary(ecm_only_xm$CELL_LABEL)
mosaic(EXTRA_VELD_01 ~ CELL_LABEL, data = ecm_only_xm, text =ecm_only_xm, labeling_args = list(rot_labels= c(top = 90, left=90), offset_varnames = c(left = 1), offset_labels = c(left = 0.3)), margins = c(left = 4, top = 3), gp = shading_max, legend=legend_fixed)
source('D:/DataScienceKPN/R/testing/cim/karpt_ecm_cim.R')
summary(ecm_only_xm$EXTRA_VELD_01)
summary(ecm_only_xm$CELL_LABEL)
summary(cim_only_xm$EXTRA_VELD_01)
summary(cim_only_xm$CELL_LABEL)
source('D:/DataScienceKPN/R/testing/cim/karpt_ecm_cim.R')
summary(ecm_only_xm$EXTRA_VELD_01)
summary(ecm_only_xm$CELL_LABEL)
summary(cim_only_xm$EXTRA_VELD_01)
summary(cim_only_xm$CELL_LABEL)
summary(both_xm$EXTRA_VELD_01)
structable(EXTRA_VELD_01 ~ CELL_LABEL, data = ecm_only_xm)
structable(order(EXTRA_VELD_01) ~ CELL_LABEL, data = ecm_only_xm)
structable(sort(EXTRA_VELD_01) ~ CELL_LABEL, data = ecm_only_xm)
structable(EXTRA_VELD_01 ~ CELL_LABEL, data = ecm_only_xm)
mosaic(EXTRA_VELD_01 ~ CELL_LABEL, data = ecm_only_xm, text =ecm_only_xm, labeling_args = list(rot_labels= c(top = 90, left=90), offset_varnames = c(left = 1), offset_labels = c(left = 0.3)), margins = c(left = 4, top = 3), gp = shading_max, legend=legend_fixed)
labeling_cells(text = ecm_only_xm, clip = FALSE)(ecm_only_xm)
crosstab <- table(ecm_only_xm$EXTRA_VELD_01 , ecm_only_xm$CELL_LABEL)
crosstab <- crosstab[,] #Reorder or and subset rows
#If Row Proportions are wanted later
proportions <- round(prop.table(crosstab , 2 )*100)
#Hand role the structure for the mosaic
values <- c(crosstab)
rowvarcat <- c("A","B")
columnvarcat <- c("1","2")
names=c("Voice End Dt", "CELL_LABEL")
dims <- c(2,2) #columns then rows
TABS <- structure( c(values), .Dim = as.integer(dims), .Dimnames = structure( list(rowvarcat,columnvarcat ),
.Names = c(names) ) , class = "table")
PROPORTIONS <- structure( c(proportions), .Dim = as.integer(dims), .Dimnames = structure( list(rowvarcat,columnvarcat ),
.Names = c(names) ) , class = "table")
TABSPROPORTIONS <- structure( c(paste(proportions,"%","\n", "(",values,")",sep="")), .Dim = as.integer(dims), .Dimnames = structure( list(rowvarcat,columnvarcat ),
.Names = c(names) ) , class = "table")
mosaic(TABS,pop=FALSE, main="Plot Title", sub="Plot Subtitle)")
View(crosstab)
crosstab<-crosstab[order(row.names(crosstab)),]
View(crosstab)
row.names(crosstab)
order(row.names(crosstab))
crosstab<-crosstab[row.names(crosstab),]
View(crosstab)
crosstab[row.names(crosstab),]
order(row.names(crosstab))
row.names(crosstab)
strftime(strptime(row.names(crosstab), format="%d/%m/%Y"), "%Y-%m-%d")
order(strftime(strptime(row.names(crosstab), format="%d/%m/%Y"), "%Y-%m-%d"))
row.names(crosstab)<-strftime(strptime(row.names(crosstab), format="%d/%m/%Y"), "%Y-%m-%d")
crosstab<-crosstab[order(row.names(crosstab)),]
view(crosstab)
View(crosstab)
row.names(crosstab)<-strftime(strptime(row.names(crosstab), format="%d/%m/%Y"), "%Y-%m-%d")
mosaic(crosstab)
ecm_only_xm$EXTRA_VELD_01 <- strftime(strptime(ecm_only_xm$EXTRA_VELD_01, format="%d/%m/%Y"), "%Y-%m-%d")
mosaic(EXTRA_VELD_01 ~ CELL_LABEL, data = ecm_only_xm, text =ecm_only_xm, labeling_args = list(rot_labels= c(top = 90, left=0), offset_varnames = c(left = 1), offset_labels = c(left = 0.3)), margins = c(left = 4, top = 3), gp = shading_max, legend=legend_fixed)
crosstab
row.names(crosstab)
crosstab <- table(ecm_only_xm$EXTRA_VELD_01 , ecm_only_xm$CELL_LABEL)
crosstab
row.names(crosstab)
proportions <- round(prop.table(crosstab , 2 )*100)
#Hand role the structure for the mosaic
values <- c(crosstab)
rowvarcat <- c("2015-07-24" ,"2015-07-25", "2015-07-26", "2015-07-27" ,"2015-07-28" ,"2015-07-29" ,"2015-07-30", "2015-08-19" ,"2015-08-20", "2015-08-21" ,"2015-08-22", "2015-08-23" ,"2015-08-24" ,colum"2015-08-25")
rowvarcat <- c("2015-07-24" ,"2015-07-25", "2015-07-26", "2015-07-27" ,"2015-07-28" ,"2015-07-29" ,"2015-07-30", "2015-08-19" ,"2015-08-20", "2015-08-21" ,"2015-08-22", "2015-08-23" ,"2015-08-24" ,"2015-08-25")
columnvarcat <- c("KARPT/5/B/1", "KARPT/5/E/1", "KARPT/6/B/1", "KARPT/6/E/1")
names=c("Voice End Dt", "CELL_LABEL")
dims <- c(14,4) #columns then rows
TABS <- structure( c(values), .Dim = as.integer(dims), .Dimnames = structure( list(rowvarcat,columnvarcat ), .Names = c(names) ) , class = "table")
PROPORTIONS <- structure( c(proportions), .Dim = as.integer(dims), .Dimnames = structure( list(rowvarcat,columnvarcat ), .Names = c(names) ) , class = "table")
TABSPROPORTIONS <- structure( c(paste(proportions,"%","\n", "(",values,")",sep="")), .Dim = as.integer(dims), .Dimnames = structure( list(rowvarcat,columnvarcat ), .Names = c(names) ) , class = "table")
mosaic(TABS,pop=FALSE, main="Plot Title", sub="Plot Subtitle)")
labeling_cells(text=TABSPROPORTIONS , clip_cells=FALSE)(TABS )
labeling_cells(text=TABS , clip_cells=TRUE)(TABS )
mosaic(TABS,pop=FALSE, main="ECM vs CIM", sub="Leads only on ECM")
labeling_cells(text=TABS , clip_cells=TRUE)(TABS )
mosaic(TABS,pop=FALSE, main="ECM vs CIM", sub="Leads only on ECM", labeling_args = list(rot_labels= c(top = 90, left=0), offset_varnames = c(left = 1), offset_labels = c(left = 0.3)), margins = c(left = 4, top = 3), gp = shading_max, legend=legend_fixed)
labeling_cells(text=TABS , clip_cells=TRUE)(TABS )
mosaic(TABS,pop=FALSE, main="ECM vs CIM", sub="Leads only on ECM", labeling_args = list(rot_labels= c(top = 0, left=0), offset_varnames = c(left = 1), offset_labels = c(left = 0.3)), margins = c(left = 4, top = 3), gp = shading_max, legend=legend_fixed)
labeling_cells(text=TABS , clip_cells=TRUE)(TABS )
mosaic(TABS,pop=FALSE, main="ECM vs CIM", sub="Leads only on ECM", labeling_args = list(rot_labels= c(top = 0, left=0), offset_varnames = c(left = 1), offset_labels = c(left = 0.3)), margins = c(left = 4, top = 3))
labeling_cells(text=TABS , clip_cells=TRUE)(TABS )
view(crosstab)
install.packages("png")
title: "Practical Machine Learning Course Notes"
install.packages(c("colorspace", "Formula", "ggplot2", "Hmisc", "jsonlite", "manipulate", "plyr", "quantmod", "Rcpp", "RCurl", "RODBC", "roxygen2", "rstudioapi", "stringr", "zoo"))
install.packages("caret")
plot(smallSpam$capitalAve,col=spamLabel)
source('~/.active-rstudio-document')
install.packages("kernlab")
source('~/.active-rstudio-document')
View(smallSpam)
class(smallSpam$capitalAve)
# first rule (over-fitting to capture all variation)
rule1 <- function(x){
prediction <- rep(NA,length(x))
prediction[x > 2.7] <- "spam"
prediction[x < 2.40] <- "nonspam"
prediction[(x >= 2.40 & x <= 2.45)] <- "spam"
prediction[(x > 2.45 & x <= 2.70)] <- "nonspam"
4
return(prediction)
}
rule2 <- function(x){
prediction <- rep(NA,length(x))
prediction[x > 2.8] <- "spam"
prediction[x <= 2.8] <- "nonspam"
return(prediction)
}
table(rule1(smallSpam$capitalAve),smallSpam$type)
rule1 <- function(x){
prediction <- rep(NA,length(x))
prediction[x > 2.7] <- "spam"
prediction[x < 2.40] <- "nonspam"
prediction[(x >= 2.40 & x <= 2.45)] <- "spam"
prediction[(x > 2.45 & x <= 2.70)] <- "nonspam"
return(prediction)
}
table(rule2(smallSpam$capitalAve),smallSpam$type)
rule2 <- function(x){
prediction <- rep(NA,length(x))
prediction[x > 2.8] <- "I say spam"
prediction[x <= 2.8] <- "I say nonspam"
return(prediction)
}
table(rule2(smallSpam$capitalAve),smallSpam$type)
rule2 <- function(x){
prediction <- rep(NA,length(x))
prediction[x > 2.8] <- "predicted spam"
prediction[x <= 2.8] <- "predicted nonspam"
return(prediction)
}
table(rule2(smallSpam$capitalAve),smallSpam$type)
table(rule1(spam$capitalAve),spam$type)
table(rule2(spam$capitalAve),spam$type)
rbind("Rule 1" = c(Accuracy = mean(rule1(spam$capitalAve)==spam$type),
"Total Correct" = sum(rule1(spam$capitalAve)==spam$type)),
"Rule 2" = c(Accuracy = mean(rule2(spam$capitalAve)==spam$type),
"Total Correct" = sum(rule2(spam$capitalAve)==spam$type)))
rule2 <- function(x){
prediction <- rep(NA,length(x))
prediction[x > 2.8] <- "spam"
prediction[x <= 2.8] <- "nonspam"
return(prediction)
}
rbind("Rule 1" = c(Accuracy = mean(rule1(spam$capitalAve)==spam$type),
"Total Correct" = sum(rule1(spam$capitalAve)==spam$type)),
"Rule 2" = c(Accuracy = mean(rule2(spam$capitalAve)==spam$type),
"Total Correct" = sum(rule2(spam$capitalAve)==spam$type)))
3366/4601
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
install.packages("shiny")
runApp()
library("shiny", lib.loc="~/R/win-library/3.1")
runApp()
shiny::runApp()
shiny::runApp()
install.packages("manipulate")
source('D:/DataScienceKPN/R/functions/theWordCloud.R')
clean.text = function(x)
;
theWordCloud(#EUopendoors")
;
theWordCloud("#EUopendoors")
install.packages("tm")
install.packages("wordcloud")
theWordCloud("#EUopendoors")
install.packages("twitteR")
theWordCloud("#EUopendoors")
install.packages("bit")
install.packages("igraph")
install.packages("~/R/win-library/3.1/teradataR/R/teradataR", repos = NULL)
source('D:/DataScienceKPN/R/functions/theWordGraph.R')
theWordGraph("#EUopendoors")
install.packages("twitteR")
theWordCloud("#EUopendoors")
theWordGraph("#EUopendoors")
?setup_twitter_oauth
source('D:/DataScienceKPN/R/functions/practicalMachineLearningJohnsHopkins.R')
install.packages("kernlab")
source('D:/DataScienceKPN/R/functions/practicalMachineLearningJohnsHopkins.R')
table(rule1(spam$capitalAve),spam$type)
rbind("Rule 1" = c(Accuracy = mean(rule1(spam$capitalAve)==spam$type),
"Total Correct" = sum(rule1(spam$capitalAve)==spam$type)),
"Rule 2" = c(Accuracy = mean(rule2(spam$capitalAve)==spam$type),
"Total Correct" = sum(rule2(spam$capitalAve)==spam$type)))
install.packages("base64enc")
library(devtools)
install.packages("devtools")
library(devtools)
install.packages(c("devtools", "manipulate"))
library(devtools)
run find_rtools()
find_rtools()
library(devtools)
library("base64enc", lib.loc="~/R/win-library/3.2")
library("devtools", lib.loc="~/R/win-library/3.2")
install_github("ramnathv/rCharts@dev")
install.packages("shiny")
library("shiny", lib.loc="~/R/win-library/3.2")
install.packages(c("devtools", "manipulate"))
library("devtools", lib.loc="~/R/win-library/3.2")
library("devtools", lib.loc="~/R/win-library/3.2")
install.packages("manipulate")
library("devtools", lib.loc="~/R/win-library/3.2")
library("manipulate", lib.loc="~/R/win-library/3.2")
library("rCharts", lib.loc="~/R/win-library/3.2")
shiny::runApp()
runApp(display.mode = ’showcase’)
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
shiny::runApp()
install.packages("googleVis")
runApp(display.mode = "showcase")
install.packages("plotGoogleMaps")
evtools::install_github("ropensci/plotly")
devtools::install_github("ropensci/plotly")
devtools::install_github(’rstudio/shinyapps’)
devtools::install_github("rstudio/shinyapps")
library(cars)
data(cars)
cars
names(cars)
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s=slider(0, 2, step=0.1))
names(airquality)
library("rCharts", lib.loc="~/R/win-library/3.2")
dTable(airquality, sPaginationType = "full_numbers")
library(UsingR)
install.packages("UsingR")
shiny::runApp()
shiny::runApp()
runApp(display.mode = "showcase")
runApp(display.mode = "showcase")
sessionInfo()
library("devtools", lib.loc="~/R/win-library/3.1")
library("devtools", lib.loc="~/R/win-library/3.2")
devtools::install_github('ramnathv/slidify', ref = github_pull(425))
setwd("D:/DataScienceKPN/R/functions/my first slidify")
slidify('index.Rmd')
library(slidify)
library(knitr)
slidify('index.Rmd')
browseURL('index.html')
sessionInfo()
publish(user = "gianluigiB", repo = "myFirstSlidify", host = 'github')
publish(user = "gianluigiB", repo = "myFirstSlidify", host = 'github')
publish(user = "gianluigiB", repo = "gianluigiB.github.io", host = 'github')
publish(user = "gianluigiB", repo = "gianluigiB.github.io", host = 'github')
publish(user = "gianluigiB", repo = "gianluigiB.github.io", host = 'github')
install.packages("manipulate")
